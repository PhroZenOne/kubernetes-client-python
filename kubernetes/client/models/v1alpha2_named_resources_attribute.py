# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: release-1.30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from kubernetes.client.models.v1alpha2_named_resources_int_slice import V1alpha2NamedResourcesIntSlice
from kubernetes.client.models.v1alpha2_named_resources_string_slice import V1alpha2NamedResourcesStringSlice
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1alpha2NamedResourcesAttribute(BaseModel):
    """
    NamedResourcesAttribute is a combination of an attribute name and its value.
    """ # noqa: E501
    bool: Optional[StrictBool] = Field(default=None, description="BoolValue is a true/false value.")
    int: Optional[StrictInt] = Field(default=None, description="IntValue is a 64-bit integer.")
    int_slice: Optional[V1alpha2NamedResourcesIntSlice] = Field(default=None, alias="intSlice")
    name: StrictStr = Field(description="Name is unique identifier among all resource instances managed by the driver on the node. It must be a DNS subdomain.")
    quantity: Optional[StrictStr] = Field(default=None, description="QuantityValue is a quantity.")
    string: Optional[StrictStr] = Field(default=None, description="StringValue is a string.")
    string_slice: Optional[V1alpha2NamedResourcesStringSlice] = Field(default=None, alias="stringSlice")
    version: Optional[StrictStr] = Field(default=None, description="VersionValue is a semantic version according to semver.org spec 2.0.0.")
    __properties: ClassVar[List[str]] = ["bool", "int", "intSlice", "name", "quantity", "string", "stringSlice", "version"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1alpha2NamedResourcesAttribute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of int_slice
        if self.int_slice:
            _dict['intSlice'] = self.int_slice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of string_slice
        if self.string_slice:
            _dict['stringSlice'] = self.string_slice.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V1alpha2NamedResourcesAttribute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bool": obj.get("bool"),
            "int": obj.get("int"),
            "intSlice": V1alpha2NamedResourcesIntSlice.from_dict(obj.get("intSlice")) if obj.get("intSlice") is not None else None,
            "name": obj.get("name"),
            "quantity": obj.get("quantity"),
            "string": obj.get("string"),
            "stringSlice": V1alpha2NamedResourcesStringSlice.from_dict(obj.get("stringSlice")) if obj.get("stringSlice") is not None else None,
            "version": obj.get("version")
        })
        return _obj


